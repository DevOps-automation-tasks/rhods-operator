# name: Sync Bundle from Operator Repo to RBC Repo

# on:
#   push:
#     branches:
#       - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
#     paths:
#       - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
#       - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}  # Use the same branch name as in the event

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}  # Use the same branch name as in the event

#       - name: Remove unnecessary fields from CSV
#         run: |
#           sed -i '/olm.skipRange/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml
#           sed -i '/replaces/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml

#       - name: Remove channels and defaultChannel from annotations.yaml
#         run: |
#           sed -i '/channels:/d' source_repo/bundle/metadata/annotations.yaml
#           sed -i '/defaultChannel:/d' source_repo/bundle/metadata/annotations.yaml

#       - name: Retain current image digests in the RBC repo
#         run: |
#           # Backup current image digests
#           cp target_repo/bundle/manifests/*.clusterserviceversion.yaml /tmp/rbc_csv.yaml
#           # Replace image digests in the source CSV with the ones from the target repo
#           for image in $(grep -oP 'image:\s*\K\S+' /tmp/rbc_csv.yaml); do
#             sed -i "s|image: .*|image: $image|g" source_repo/bundle/manifests/*.clusterserviceversion.yaml
#           done

#       - name: Compare and Sync Changes
#         run: |
#           # Function to compare and sync files
#           sync_files() {
#             local source_dir=$1
#             local target_dir=$2
#             for file in $(find $source_dir -type f); do
#               relative_path=$(realpath --relative-to="$source_dir" "$file")
#               target_file="$target_dir/$relative_path"
#               if [ -f "$target_file" ]; then
#                 if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
#                   echo "Updating $target_file"
#                   cp "$file" "$target_file"
#                 else
#                   echo "No changes in $target_file"
#                 fi
#               else
#                 echo "New file detected, copying $file to target repo"
#                 mkdir -p "$(dirname "$target_file")"
#                 cp "$file" "$target_file"
#               fi
#             done
#           }
#           # Sync files from source_repo/bundle to target_repo/bundle
#           sync_files "source_repo/bundle" "target_repo/bundle"
          
#           # Sync Dockerfile
#           if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
#             echo "Updating Dockerfile"
#             cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
#           else
#             echo "No changes in Dockerfile"
#           fi

#       - name: Commit and Push Changes to Target Repo
#         run: |
#           cd target_repo
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git add .
#           git commit -m "Sync changes from source repo" || echo "No changes to commit"
#           git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo


name: Sync Bundle from Operator Repo to RBC Repo

on:
  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator.git
          token: ${{ secrets.PAT_TOKEN }}
          path: source_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config.git
          token: ${{ secrets.PAT_TOKEN }}
          path: target_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Remove unnecessary fields from source CSV
        run: |
          # Load existing CSV to extract relatedImages first
          existing_csv=$(cat source_repo/bundle/manifests/*.clusterserviceversion.yaml)
          related_images=$(echo "$existing_csv" | yq '.spec.relatedImages')

          # Remove unwanted fields from the source CSV but keep relatedImages
          yq eval 'del(.spec.skipRange, .spec.replaces)' -i source_repo/bundle/manifests/*.clusterserviceversion.yaml

      - name: Remove channels and defaultChannel from annotations.yaml
        run: |
          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channels.v1")' -i source_repo/bundle/metadata/annotations.yaml
          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channel.default.v1")' -i source_repo/bundle/metadata/annotations.yaml

      - name: Load existing CSV to extract relatedImages
        id: extract_related_images
        run: |
          # Define the source and target paths
          TARGET_CSV=target_repo/bundle/manifests/rhods-operator.clusterserviceversion.yaml
          SOURCE_CSV=source_repo/bundle/manifests/rhods-operator.clusterserviceversion.yaml

          # Step 1: Load existing target CSV and extract containerImage
          #container_image=$(yq e '.spec.template.spec.containers[0].image' "$TARGET_CSV")
          related_images=$(yq e '.spec.relatedImages' "$TARGET_CSV" | yq e -P -)
          #related_images_upper=$(yq e '.spec.RELATED_IMAGES' "$TARGET_CSV" | yq e -P -)

          #echo "Extracted containerImage: $container_image"
          echo "Extracted relatedImages: $related_images"
          #echo "Extracted RELATED_IMAGES: $related_images_upper"

          modified_source=$(yq e 'del(.spec.relatedImages, .spec.RELATED_IMAGES, .spec.template.spec.containers[0].image)' "$SOURCE_CSV")

          # Step 3: Merge source content with the target's unchanged fields
          updated_csv=$(echo "$modified_source" | yq e "
            .spec.relatedImages = $related_images |
          ")

          # Step 4: Write the updated CSV back to the target
          echo "$updated_csv" > "$TARGET_CSV"

      - name: Compare and Sync Changes
        run: |
          sync_files() {
            local source_dir=$1
            local target_dir=$2
            for file in $(find $source_dir -type f); do
              relative_path=$(realpath --relative-to="$source_dir" "$file")
              target_file="$target_dir/$relative_path"
              if [ -f "$target_file" ]; then
                if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
                  echo "Updating $target_file"
                  cp "$file" "$target_file"
                else
                  echo "No changes in $target_file"
                fi
              else
                echo "New file detected, copying $file to target repo"
                mkdir -p "$(dirname "$target_file")"
                cp "$file" "$target_file"
              fi
            done
          }
          # Sync files from source_repo/bundle to target_repo/bundle
          sync_files "source_repo/bundle" "target_repo/bundle"

      - name: Sync Dockerfile
        run: |
          if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
            echo "Updating Dockerfile"
            cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
            echo "No changes in Dockerfile"
          fi

      - name: Commit and Push Changes to Target Repo
        run: |
          cd target_repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Sync changes from source repo" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo

