# name: Sync Bundle from Operator Repo to RBC Repo

# on:
#   push:
#     branches:
#       - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
#     paths:
#       - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
#       - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}  # Use the same branch name as in the event

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}  # Use the same branch name as in the event

#       - name: Remove unnecessary fields from CSV
#         run: |
#           sed -i '/olm.skipRange/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml
#           sed -i '/replaces/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml

#       - name: Remove channels and defaultChannel from annotations.yaml
#         run: |
#           sed -i '/channels:/d' source_repo/bundle/metadata/annotations.yaml
#           sed -i '/defaultChannel:/d' source_repo/bundle/metadata/annotations.yaml

#       - name: Retain current image digests in the RBC repo
#         run: |
#           # Backup current image digests
#           cp target_repo/bundle/manifests/*.clusterserviceversion.yaml /tmp/rbc_csv.yaml
#           # Replace image digests in the source CSV with the ones from the target repo
#           for image in $(grep -oP 'image:\s*\K\S+' /tmp/rbc_csv.yaml); do
#             sed -i "s|image: .*|image: $image|g" source_repo/bundle/manifests/*.clusterserviceversion.yaml
#           done

#       - name: Compare and Sync Changes
#         run: |
#           # Function to compare and sync files
#           sync_files() {
#             local source_dir=$1
#             local target_dir=$2
#             for file in $(find $source_dir -type f); do
#               relative_path=$(realpath --relative-to="$source_dir" "$file")
#               target_file="$target_dir/$relative_path"
#               if [ -f "$target_file" ]; then
#                 if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
#                   echo "Updating $target_file"
#                   cp "$file" "$target_file"
#                 else
#                   echo "No changes in $target_file"
#                 fi
#               else
#                 echo "New file detected, copying $file to target repo"
#                 mkdir -p "$(dirname "$target_file")"
#                 cp "$file" "$target_file"
#               fi
#             done
#           }
#           # Sync files from source_repo/bundle to target_repo/bundle
#           sync_files "source_repo/bundle" "target_repo/bundle"
          
#           # Sync Dockerfile
#           if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
#             echo "Updating Dockerfile"
#             cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
#           else
#             echo "No changes in Dockerfile"
#           fi

#       - name: Commit and Push Changes to Target Repo
#         run: |
#           cd target_repo
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git add .
#           git commit -m "Sync changes from source repo" || echo "No changes to commit"
#           git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo

name: Sync Bundle from Operator Repo to RBC Repo

on:
  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator.git
          token: ${{ secrets.PAT_TOKEN }}
          path: source_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config.git
          token: ${{ secrets.PAT_TOKEN }}
          path: target_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Install rsync and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync
          # Install yq
          VERSION=v4.34.2  # Specify the version of yq to install
          sudo wget https://github.com/mikefarah/yq/releases/download/${VERSION}/yq_linux_amd64 -O /usr/bin/yq
          # Set permissions for yq
          sudo chmod +x /usr/bin/yq
          
      - name: Remove unnecessary fields from CSV
        run: |
          sed -i '/olm.skipRange/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml
          sed -i '/replaces/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml
          
      - name: Backup RELATED_IMAGE fields and relatedImages section
        run: |
          # Backup RELATED_IMAGE fields
          grep '^RELATED_IMAGE_' target_repo/bundle/manifests/*.clusterserviceversion.yaml > /tmp/backup_related_image.txt || true
          # Backup relatedImages section
          sed -n '/relatedImages:/,/]/p' target_repo/bundle/manifests/*.clusterserviceversion.yaml > /tmp/backup_relatedImages.txt || true
          
      - name: Retain current image digests in the RBC repo
        run: |
          # Backup current image digests
          cp target_repo/bundle/manifests/*.clusterserviceversion.yaml /tmp/rbc_csv.yaml
          
          # Replace image digests in the source CSV with the ones from the target repo
          for image in $(grep -oP 'image:\s*\K\S+' /tmp/rbc_csv.yaml); do
            sed -i "s|image: .*|image: $image|g" source_repo/bundle/manifests/*.clusterserviceversion.yaml
          done
          
      - name: Sync RELATED_IMAGE values (excluding annotations)
        run: |
          # Extract RELATED_IMAGE_* values from the target CSV
          while IFS= read -r related_image; do
            value=$(grep "$related_image:" /tmp/backup_related_image.txt | cut -d: -f2- | xargs) # Trim leading spaces from the value
            yq eval -i ".metadata.annotations[\"$related_image\"] = \"$value\"" source_repo/bundle/manifests/*.clusterserviceversion.yaml
          done < /tmp/backup_related_image.txt
          
      - name: Sync Files Using rsync
        run: |
          # Sync bundle directory from source to target using rsync
          rsync -av --progress source_repo/bundle/ target_repo/bundle/
          # Sync Dockerfile
          rsync -av --progress source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
          
      - name: Restore RELATED_IMAGE fields and relatedImages section
        run: |
          # Restore the RELATED_IMAGE fields
          while IFS= read -r line; do
            key=$(echo "$line" | cut -d: -f1)
            value=$(echo "$line" | cut -d: -f2- | xargs) # Trim leading spaces from the value
            
            # Check if the RELATED_IMAGE field already exists
            existing_value=$(yq eval ".spec.containers[].env[] | select(.name == \"$key\").value" target_repo/bundle/manifests/*.clusterserviceversion.yaml)
            # If the RELATED_IMAGE exists, only update if it's empty
            if [ -n "$existing_value" ]; then
              echo "RELATED_IMAGE '$key' already exists with value '$existing_value'. Not updating."
            else
              echo "Updating RELATED_IMAGE '$key' with value '$value'."
              yq eval -i ".spec.containers[].env += [{name: \"$key\", value: \"$value\"}]" target_repo/bundle/manifests/*.clusterserviceversion.yaml
            fi
            
          done < /tmp/backup_related_image.txt
          # Restore the relatedImages section if it exists
          if [[ -s /tmp/backup_relatedImages.txt ]]; then
            # Check if the relatedImages already exist before setting
            related_images_present=$(yq eval 'has(.spec.relatedImages)' target_repo/bundle/manifests/*.clusterserviceversion.yaml)
            if [ "$related_images_present" == "false" ]; then
              # If it doesn't exist, create the relatedImages section
              echo "Creating relatedImages section."
              yq eval -i '.spec.relatedImages = load("/tmp/backup_relatedImages.txt")' target_repo/bundle/manifests/*.clusterserviceversion.yaml
            else
              # If it exists, append the relatedImages (assuming the format is an array)
              echo "Appending to existing relatedImages section."
              yq eval -i '.spec.relatedImages += load("/tmp/backup_relatedImages.txt")' target_repo/bundle/manifests/*.clusterserviceversion.yaml
            fi
          fi
          
      - name: Debug Existing RELATED_IMAGE Fields in Source
        run: |
          echo "Existing RELATED_IMAGE fields in source CSV:"
          yq eval '.spec.containers[].env[] | select(.name == "RELATED_IMAGE")' /path/to/source/csv.yaml
          
      - name: Debug Backup of RELATED_IMAGE Fields
        run: |
          echo "Contents of /tmp/backup_related_image.txt:"
          cat /tmp/backup_related_image.txt
          
      - name: Debug Target CSV File Structure
        run: |
          echo "Target CSV structure:"
          yq eval '.spec.containers[]' target_repo/bundle/manifests/*.clusterserviceversion.yaml



     # - name: Commit and Push Changes to Target Repo
     #   run: |
      #    cd target_repo
     #     git config user.name "GitHub Actions"
     #     git config user.email "actions@github.com"
      #    git add .
       #   git commit -m "Sync changes from source repo" || echo "No changes to commit"
       #   git push origin ${{ github.ref_name }}

