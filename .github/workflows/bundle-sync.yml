# name: Sync Bundle from Operator Repo to RBC Repo

# on:
#   push:
#     branches:
#       - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
#     paths:
#       - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
#       - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}  # Use the same branch name as in the event

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}  # Use the same branch name as in the event

#       - name: Remove unnecessary fields from CSV
#         run: |
#           sed -i '/olm.skipRange/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml
#           sed -i '/replaces/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml

#       - name: Remove channels and defaultChannel from annotations.yaml
#         run: |
#           sed -i '/channels:/d' source_repo/bundle/metadata/annotations.yaml
#           sed -i '/defaultChannel:/d' source_repo/bundle/metadata/annotations.yaml

#       - name: Retain current image digests in the RBC repo
#         run: |
#           # Backup current image digests
#           cp target_repo/bundle/manifests/*.clusterserviceversion.yaml /tmp/rbc_csv.yaml
#           # Replace image digests in the source CSV with the ones from the target repo
#           for image in $(grep -oP 'image:\s*\K\S+' /tmp/rbc_csv.yaml); do
#             sed -i "s|image: .*|image: $image|g" source_repo/bundle/manifests/*.clusterserviceversion.yaml
#           done

#       - name: Compare and Sync Changes
#         run: |
#           # Function to compare and sync files
#           sync_files() {
#             local source_dir=$1
#             local target_dir=$2
#             for file in $(find $source_dir -type f); do
#               relative_path=$(realpath --relative-to="$source_dir" "$file")
#               target_file="$target_dir/$relative_path"
#               if [ -f "$target_file" ]; then
#                 if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
#                   echo "Updating $target_file"
#                   cp "$file" "$target_file"
#                 else
#                   echo "No changes in $target_file"
#                 fi
#               else
#                 echo "New file detected, copying $file to target repo"
#                 mkdir -p "$(dirname "$target_file")"
#                 cp "$file" "$target_file"
#               fi
#             done
#           }
#           # Sync files from source_repo/bundle to target_repo/bundle
#           sync_files "source_repo/bundle" "target_repo/bundle"
          
#           # Sync Dockerfile
#           if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
#             echo "Updating Dockerfile"
#             cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
#           else
#             echo "No changes in Dockerfile"
#           fi

#       - name: Commit and Push Changes to Target Repo
#         run: |
#           cd target_repo
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git add .
#           git commit -m "Sync changes from source repo" || echo "No changes to commit"
#           git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo

name: Sync Bundle from Operator Repo to RBC Repo

on:
  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator.git
          token: ${{ secrets.PAT_TOKEN }}
          path: source_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config.git
          token: ${{ secrets.PAT_TOKEN }}
          path: target_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Remove unnecessary fields from source CSV
        run: |
          # Remove unwanted fields from the source CSV, but keep relatedImages and RELATED_IMAGE sections
          yq eval 'del(.spec.skipRange, .spec.replaces)' -i source_repo/bundle/manifests/*.clusterserviceversion.yaml

      - name: Remove channels and defaultChannel from annotations.yaml
        run: |
          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channels.v1")' -i source_repo/bundle/metadata/annotations.yaml
          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channel.default.v1")' -i source_repo/bundle/metadata/annotations.yaml

      - name: Compare and Sync Changes
        run: |
          sync_files() {
            local source_dir=$1
            local target_dir=$2
            for file in $(find $source_dir -type f); do
              relative_path=$(realpath --relative-to="$source_dir" "$file")
              target_file="$target_dir/$relative_path"
              if [ -f "$target_file" ]; then
                if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
                  echo "Updating $target_file"
                  cp "$file" "$target_file"
                else
                  echo "No changes in $target_file"
                fi
              else
                echo "New file detected, copying $file to target repo"
                mkdir -p "$(dirname "$target_file")"
                cp "$file" "$target_file"
              fi
            done
          }
          # Sync files from source_repo/bundle to target_repo/bundle
          sync_files "source_repo/bundle" "target_repo/bundle"

      - name: Preserve relatedImages and RELATED_IMAGE sections
        run: |
          csv_file="target_repo/bundle/manifests/rhods-operator.clusterserviceversion.yaml"
          source_csv_file="source_repo/bundle/manifests/rhods-operator.clusterserviceversion.yaml"

          #Load the original relatedImages from the target CSV
          related_images=$(yq eval '.spec.relatedImages' "$csv_file")
          
          # Remove the relatedImages section in the source CSV to avoid overwriting
          yq eval 'del(.spec.relatedImages)' -i "$source_csv_file"

          # Restore the relatedImages from the target CSV to the source CSV
          echo "Restoring relatedImages."
          yq eval -i ".spec.relatedImages = $related_images" "$source_csv_file"

          # Extract RELATED_IMAGE_* environment variables from the target CSV
          related_image_envs=$(yq eval '.spec.install.spec.deployments[0].spec.template.spec.containers[].env[] | select(.name == "RELATED_IMAGE_*")' "$csv_file")

          # Loop through related_image_envs to restore them to the source CSV
          for row in $(echo "$related_image_envs" | yq eval -o=json '.name'); do
            name=$(echo "$row" | yq eval -r '.name')
            value=$(echo "$row" | yq eval -r '.value')

            # Check if the environment variable already exists in the source CSV
            if ! yq eval "any(.spec.install.spec.deployments[0].spec.template.spec.containers[].env[]; .name == \"$name\")" "$source_csv_file"; then
              echo "Restoring $name"
             # Append the environment variable to the source CSV
             yq eval -i ".spec.install.spec.deployments[0].spec.template.spec.containers[].env += [{name: \"$name\", value: \"$value\"}]" "$source_csv_file"
            fi
          done

      - name: Remove Unwanted Labels from Dockerfile
        run: |
          # Remove specific labels from the Dockerfile in the target repo
          dockerfile_path="target_repo/Dockerfiles/bundle.Dockerfile"
          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channels.v1", .annotations."operators.operatorframework.io.bundle.channel.default.v1")' -i "$dockerfile_path"

      - name: Sync Dockerfile
        run: |
          if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/Dockerfiles/bundle.Dockerfile > /dev/null 2>&1; then
            echo "Updating Dockerfile"
            cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/Dockerfiles/bundle.Dockerfile
          else
            echo "No changes in Dockerfile"
          fi

      - name: Commit and Push Changes to Target Repo
        run: |
          cd target_repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Sync changes from source repo" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo

