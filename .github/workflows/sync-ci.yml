name: Sync Repos2

on:
  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any 'rhoai-*' branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator.git
          token: ${{ secrets.PAT_TOKEN }}
          path: source_repo
          ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config.git
          token: ${{ secrets.PAT_TOKEN }}
          path: target_repo
          ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

      - name: Remove channels, default channel, replaces, and skip ranges
        run: |
          find source_repo/bundle -name '*.clusterserviceversion.yaml' -exec sed -i '/^  channels:/d; /^  defaultChannel:/d; /^  replaces:/d; /^  skipRange:/d' {} +

      - name: Sync changes while retaining image digests
        run: |
          mkdir -p target_repo/bundle
          
          # Sync CSV, metadata, and CRDs, excluding image digests
          rsync -av --exclude='*.clusterserviceversion.yaml' source_repo/bundle/ target_repo/bundle/

          # Handle CSV files to retain current image digests
          for file in source_repo/bundle/*.clusterserviceversion.yaml; do
            if [ -f "target_repo/bundle/$(basename $file)" ]; then
              # Retain image digests in CSV files
              awk '
                BEGIN {FS=OFS=": "}
                FNR==NR && /image:/ {digests[$1]=$2; next}
                /image:/ && $1 in digests {print $1, digests[$1]}
                !/image:/ {print $0}
              ' target_repo/bundle/$(basename $file) $file > temp.yaml && mv temp.yaml target_repo/bundle/$(basename $file)
            else
              # If the file doesn't exist in the target, just copy it
              cp $file target_repo/bundle/
            fi
          done

          # Sync the Dockerfile
          cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile

          echo "Files synced to target repo."

      - name: Commit and push changes to target repo
        run: |
          cd target_repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Sync changes from source repo while retaining image digests" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo
