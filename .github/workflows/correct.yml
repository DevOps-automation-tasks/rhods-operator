# name: Sync Repos2

# on:
#   push:
#     branches:
#       - 'rhoai-*'  # Trigger the workflow on pushes to any branch
#     paths:
#       - 'bundle/**'  # Adjust the path to match where the bundle files are located
#       - 'Dockerfiles/bundle.Dockerfile'# Trigger the workflow for changes to any file

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Sync changes
#         run: |
#           mkdir -p target_repo/bundle
#           cp -r source_repo/bundle/* target_repo/bundle/
#           cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
#           echo "Files synced to target repo."
          
#       - name: Commit and push changes to target repo
#         run: |
#           cd target_repo
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git add .
#           git commit -m "Sync changes from source repo" || echo "No changes to commit"
#           git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo


name: Sync Bundles

on:
  push:
    paths:
      - 'source_repo/bundle/**'
      - 'Dockerfiles/bundle.Dockerfile'

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v3
        with:
          repository: your-org/source-repo
          path: source_repo

      - name: Checkout Target Repository
        uses: actions/checkout@v3
        with:
          repository: your-org/target-repo
          path: target_repo
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Sync Changes
        run: |
          # Navigate to the source bundle directory
          cd source_repo/bundle || exit

          # Create target directories if they don't exist
          mkdir -p ../target_repo/bundle

          # Debugging: List the files in the source bundle directory
          echo "Source repo bundle files:"
          find . -type f

          # Loop over each file in the source repo
          for file in $(find . -type f); do
            # Remove leading './' from file path
            relative_path=${file#./}
            target_file="../target_repo/bundle/${relative_path}"

            # Debugging: Output file paths
            echo "Checking file: $file"
            echo "Target file: $target_file"

            # Create target directories if they don't exist
            mkdir -p "$(dirname "$target_file")"

            # Check if the file exists in the target repo
            if [ -f "$target_file" ]; then
              echo "File exists, copying: $file to $target_file"
              cp "$file" "$target_file"
              echo "Updated $file in target repo."
            else
              echo "File $file does not exist in the target repo, skipping."
            fi
          done

          # Copy the Dockerfile
          dockerfile_source="../Dockerfiles/bundle.Dockerfile"
          dockerfile_target="../target_repo/bundle/Dockerfile"
          
          if [ -f "$dockerfile_source" ]; then
            cp "$dockerfile_source" "$dockerfile_target"
            echo "Dockerfile updated in target repo."
          else
            echo "Dockerfile source not found, skipping."
          fi

      - name: Commit and Push Changes
        run: |
          # Navigate to the target repository directory
          cd target_repo || exit

          # Configure Git user
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Check for changes and push if any
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing and pushing."
            git add .
            git commit -m "Sync bundle updates from source repository"
            git push origin main
          else
            echo "No changes detected, nothing to commit."
          fi


