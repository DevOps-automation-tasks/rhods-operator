# name: Sync Repos2

# on:
#   push:
#     branches:
#       - 'rhoai-*'  # Trigger the workflow on pushes to any branch
#     paths:
#       - 'bundle/**'  # Adjust the path to match where the bundle files are located
#       - 'Dockerfiles/bundle.Dockerfile'# Trigger the workflow for changes to any file

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Sync changes
#         run: |
#           mkdir -p target_repo/bundle
#           cp -r source_repo/bundle/* target_repo/bundle/
#           cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
#           echo "Files synced to target repo."
          
#       - name: Commit and push changes to target repo
#         run: |
#           cd target_repo
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git add .
#           git commit -m "Sync changes from source repo" || echo "No changes to commit"
#           git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo



# name: Sync Repos

# on:
#   push:
#     branches:
#       - 'rhoai-*'
#     paths:
#       - 'bundle/**'
#       - 'Dockerfiles/bundle.Dockerfile'

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}

#       - name: Debug List files in source repo
#         run: |
#           echo "Source repo bundle files:"
#           find source_repo/bundle -type f -name "*.yaml"
#           echo "Directory structure of source repo bundle:"
#           ls -R source_repo/bundle

#       - name: Debug List files in target repo
#         run: |
#           echo "Target repo bundle files:"
#           find target_repo/bundle -type f -name "*.yaml"
#           echo "Directory structure of target repo bundle:"
#           ls -R target_repo/bundle

#       - name: Sync changes
#         run: |
#           # Navigate to the source bundle directory
#           cd source_repo/bundle || exit
#           # Create target directories if they don't exist
#           mkdir -p ../target_repo/bundle
          
#           # Loop over each file in the source repo
#           for file in $(find . -type f -name "*.yaml"); do
#             # Remove leading './' from file path for consistent target path construction
#             relative_path=${file#./}
#             target_file="../target_repo/bundle/${relative_path}"
            
#             echo "Checking file: $file"
#             echo "Target file: $target_file"
            
#             # Create target directories if they don't exist
#             mkdir -p "$(dirname "$target_file")"
            
#             # Update modification time before copying
#             touch "$file"
            
#             # Copy the updated file to the target repo
#             cp "$file" "$target_file"
#             echo "Updated $file in target repo."
#           done
          
#           # Copy the Dockerfile
#           dockerfile_source="../Dockerfiles/bundle.Dockerfile"
#           dockerfile_target="../target_repo/bundle/Dockerfile"
#           if [ -f "$dockerfile_source" ]; then
#             cp "$dockerfile_source" "$dockerfile_target"
#             echo "Dockerfile updated in target repo."
#           else
#             echo "Dockerfile source not found, skipping."
#           fi

#       - name: Debug Git status
#         run: |
#           # Navigate to the target repository directory
#           cd target_repo || exit
#           # List files and status before committing
#           echo "Files in target repo before commit:"
#           git status
#           ls -R
          
#       - name: Force Git Add and Commit
#         run: |
#           # Navigate to the target repository directory
#           cd target_repo || exit
#           # Configure Git user
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
          
#           # Force add changes
#           git add --force .
#           echo "Git status after forcing add:"
#           git status

#           # Commit and push if there are changes
#           if git diff-index --quiet HEAD; then
#             echo "No changes detected, nothing to commit."
#           else
#             echo "Changes detected, committing and pushing."
#             git commit -m "Sync bundle updates from source repository"
#             git push origin ${{ github.ref_name }}
#           fi

#03
# name: Sync Repos2

# on:
#   push:
#     branches:
#       - 'rhoai-*'  # Trigger the workflow on pushes to any branch
#     paths:
#       - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
#       - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Compare and Sync Changes
#         run: |
#           # Compare and copy only if different
#           for file in $(find source_repo/bundle -type f); do
#             target_file="target_repo/bundle/$(basename $file)"
#             if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
#               echo "Updating $target_file"
#               cp "$file" "$target_file"
#             fi
#           done
          
#           # Check and copy Dockerfile if different
#           if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
#             echo "Updating Dockerfile"
#             cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
#           fi

#       - name: Commit and Push Changes to Target Repo
#         run: |
#           cd target_repo
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git add .
#           git commit -m "Sync changes from source repo" || echo "No changes to commit"
#           git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo

# name: Sync Repos2 perf

# on:
#   push:
#     branches:
#       - 'rhoai-*'  # Trigger the workflow on pushes to any branch
#     paths:
#       - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
#       - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/rhods-operator.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: source_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Checkout target repo
#         uses: actions/checkout@v3
#         with:
#           repository: DevOps-automation-tasks/RHOAI-Build-Config.git
#           token: ${{ secrets.PAT_TOKEN }}
#           path: target_repo
#           ref: ${{ github.ref_name }}  # Explicitly specify the branch being built

#       - name: Compare and Sync Changes
#         run: |
#           # Function to compare and sync files
#           sync_files() {
#             local source_dir=$1
#             local target_dir=$2

#             for file in $(find $source_dir -type f); do
#               relative_path=$(realpath --relative-to="$source_dir" "$file")
#               target_file="$target_dir/$relative_path"

#               if [ -f "$target_file" ]; then
#                 if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
#                   echo "Updating $target_file"
#                   cp "$file" "$target_file"
#                 else
#                   echo "No changes in $target_file"
#                 fi
#               else
#                 echo "New file detected, copying $file to target repo"
#                 mkdir -p "$(dirname "$target_file")"
#                 cp "$file" "$target_file"
#               fi
#             done
#           }

#           # Sync files from source_repo/bundle to target_repo/bundle
#           sync_files "source_repo/bundle" "target_repo/bundle"
          
#           # Sync Dockerfile
#           if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
#             echo "Updating Dockerfile"
#             cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
#           else
#             echo "No changes in Dockerfile"
#           fi

#       - name: Commit and Push Changes to Target Repo
#         run: |
#           cd target_repo
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git add .
#           git commit -m "Sync changes from source repo" || echo "No changes to commit"
#           git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo

name: Sync Bundle from Operator Repo to RBC Repo

on:
  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator.git
          token: ${{ secrets.PAT_TOKEN }}
          path: source_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config.git
          token: ${{ secrets.PAT_TOKEN }}
          path: target_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Remove unnecessary fields from CSV
        run: |
          sed -i '/olm.skipRange/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml
          sed -i '/replaces/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml

      - name: Remove channels and defaultChannel from annotations.yaml
        run: |
          sed -i '/channels:/d' source_repo/bundle/metadata/annotations.yaml
          sed -i '/defaultChannel:/d' source_repo/bundle/metadata/annotations.yaml

      - name: Retain current image digests in the RBC repo
        run: |
          # Backup current image digests
          cp target_repo/bundle/manifests/*.clusterserviceversion.yaml /tmp/rbc_csv.yaml
          # Replace image digests in the source CSV with the ones from the target repo
          for image in $(grep -oP 'image:\s*\K\S+' /tmp/rbc_csv.yaml); do
            sed -i "s|image: .*|image: $image|g" source_repo/bundle/manifests/*.clusterserviceversion.yaml
          done

      - name: Compare and Sync Changes
        run: |
          # Function to compare and sync files
          sync_files() {
            local source_dir=$1
            local target_dir=$2
            for file in $(find $source_dir -type f); do
              relative_path=$(realpath --relative-to="$source_dir" "$file")
              target_file="$target_dir/$relative_path"
              if [ -f "$target_file" ]; then
                if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
                  echo "Updating $target_file"
                  cp "$file" "$target_file"
                else
                  echo "No changes in $target_file"
                fi
              else
                echo "New file detected, copying $file to target repo"
                mkdir -p "$(dirname "$target_file")"
                cp "$file" "$target_file"
              fi
            done
          }
          # Sync files from source_repo/bundle to target_repo/bundle
          sync_files "source_repo/bundle" "target_repo/bundle"
          
          # Sync Dockerfile
          if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
            echo "Updating Dockerfile"
            cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
          else
            echo "No changes in Dockerfile"
          fi

      - name: Commit and Push Changes to Target Repo
        run: |
          cd target_repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Sync changes from source repo" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo

